// Code generated by MockGen. DO NOT EDIT.
// Source: post_controller.go
//
// Generated by this command:
//
//	mockgen -source post_controller.go -destination ../mock/controller/mock_post_controller.go -package controller
//

// Package controller is a generated GoMock package.
package controller

import (
	context "context"
	reflect "reflect"

	dto "github.com/elangreza14/assetfindr-test/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockIPostService is a mock of IPostService interface.
type MockIPostService struct {
	ctrl     *gomock.Controller
	recorder *MockIPostServiceMockRecorder
}

// MockIPostServiceMockRecorder is the mock recorder for MockIPostService.
type MockIPostServiceMockRecorder struct {
	mock *MockIPostService
}

// NewMockIPostService creates a new mock instance.
func NewMockIPostService(ctrl *gomock.Controller) *MockIPostService {
	mock := &MockIPostService{ctrl: ctrl}
	mock.recorder = &MockIPostServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPostService) EXPECT() *MockIPostServiceMockRecorder {
	return m.recorder
}

// CreatePost mocks base method.
func (m *MockIPostService) CreatePost(ctx context.Context, req dto.CreateOrUpdatePostRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockIPostServiceMockRecorder) CreatePost(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockIPostService)(nil).CreatePost), ctx, req)
}

// DeletePost mocks base method.
func (m *MockIPostService) DeletePost(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockIPostServiceMockRecorder) DeletePost(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockIPostService)(nil).DeletePost), ctx, id)
}

// GetPost mocks base method.
func (m *MockIPostService) GetPost(ctx context.Context, ids int) (*dto.GetPostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", ctx, ids)
	ret0, _ := ret[0].(*dto.GetPostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockIPostServiceMockRecorder) GetPost(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockIPostService)(nil).GetPost), ctx, ids)
}

// GetPosts mocks base method.
func (m *MockIPostService) GetPosts(ctx context.Context) ([]dto.GetPostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosts", ctx)
	ret0, _ := ret[0].([]dto.GetPostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPosts indicates an expected call of GetPosts.
func (mr *MockIPostServiceMockRecorder) GetPosts(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosts", reflect.TypeOf((*MockIPostService)(nil).GetPosts), ctx)
}

// UpdatePost mocks base method.
func (m *MockIPostService) UpdatePost(ctx context.Context, req dto.CreateOrUpdatePostRequest, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", ctx, req, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockIPostServiceMockRecorder) UpdatePost(ctx, req, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockIPostService)(nil).UpdatePost), ctx, req, id)
}
