// Code generated by MockGen. DO NOT EDIT.
// Source: post_service.go
//
// Generated by this command:
//
//	mockgen -source post_service.go -destination ../mock/service/mock_post_service.go -package service
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	model "github.com/elangreza14/assetfindr-test/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIPostRepository is a mock of IPostRepository interface.
type MockIPostRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPostRepositoryMockRecorder
}

// MockIPostRepositoryMockRecorder is the mock recorder for MockIPostRepository.
type MockIPostRepositoryMockRecorder struct {
	mock *MockIPostRepository
}

// NewMockIPostRepository creates a new mock instance.
func NewMockIPostRepository(ctrl *gomock.Controller) *MockIPostRepository {
	mock := &MockIPostRepository{ctrl: ctrl}
	mock.recorder = &MockIPostRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPostRepository) EXPECT() *MockIPostRepositoryMockRecorder {
	return m.recorder
}

// CreatePost mocks base method.
func (m *MockIPostRepository) CreatePost(ctx context.Context, req model.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockIPostRepositoryMockRecorder) CreatePost(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockIPostRepository)(nil).CreatePost), ctx, req)
}

// DeletePost mocks base method.
func (m *MockIPostRepository) DeletePost(ctx context.Context, req model.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockIPostRepositoryMockRecorder) DeletePost(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockIPostRepository)(nil).DeletePost), ctx, req)
}

// GetPost mocks base method.
func (m *MockIPostRepository) GetPost(ctx context.Context, id int) (*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", ctx, id)
	ret0, _ := ret[0].(*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockIPostRepositoryMockRecorder) GetPost(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockIPostRepository)(nil).GetPost), ctx, id)
}

// GetPosts mocks base method.
func (m *MockIPostRepository) GetPosts(ctx context.Context) ([]model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosts", ctx)
	ret0, _ := ret[0].([]model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPosts indicates an expected call of GetPosts.
func (mr *MockIPostRepositoryMockRecorder) GetPosts(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosts", reflect.TypeOf((*MockIPostRepository)(nil).GetPosts), ctx)
}

// UpdatePost mocks base method.
func (m *MockIPostRepository) UpdatePost(ctx context.Context, req model.Post, tagsToBeDeleted ...int) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range tagsToBeDeleted {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePost", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockIPostRepositoryMockRecorder) UpdatePost(ctx, req any, tagsToBeDeleted ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, tagsToBeDeleted...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockIPostRepository)(nil).UpdatePost), varargs...)
}
